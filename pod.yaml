apiVersion: v1
kind: Pod
metadata:
  name: web
spec:
  containers: 
    - image: nginx
      name : web
      ports: 
        - containerPort : 80
          name: http
          protocol: TCP
      resources:
        requests:
          # The amount of CPU and memory the container requires to function properly at minimum
          cpu: "500m" # mille core = 1 / 10000 core "0.5" == "500m"
          memory: "128Mi"
        limits:
          # The amount of CPU and memory the container cannot exceed at maximum
          cpu: "700m"
          memory: "700Mi"
      livenessProbe: 
        # Ensures that the container is "live" by performing one or more checks
        # if the container failed the liveness probe, Kubernetes restarts it
        httpGet:
          path : / # or any other get routes /health
          port: 8080
        # tcpSocket: 
          # other checks if the image not support http protocol like mysql, kafka to check if the port is accepting
        #   port: 3306
        initialDelaySeconds: 5 # After the container is running how many S to start testing, default is 0
        timeoutSeconds: 1 # How many S waiting for the response of the route, default is 1 , if not working it will restart
        periodSeconds: 60 # test the container per S, default is 10
        failureThreshold: 3 # if the response not receiving 2xx, how many times it should accept failure to restart the container again, default is 3
        successThreshold: 1 # if the response receiving 2xx, how many times it should check the route correctness to pass the testing, default is 1
     
      readinessProbe:
        # Ensures that the container is "ready to receive requests" by preforming one or more checks.
        # if the container fails the readiness probes, Kubernetes will not route requests to it (PENDING) (it will not restart it) 
      
        # exec:
          # another check if the image not support http protocol to run command on the image to check is up and running 
        #   command:
        #     - cat
        #     - /tmp/ready
        httpGet:
          path : / # or any other get routes /health
          port: 8080
        initialDelaySeconds: 5 # After the container is running how many S to start testing, default is 0
        periodSeconds: 60 # test the container per S, default is 10

      startupProbe:
        # Checks whether an application within a container has successfully started,
        # delaying Liveness and Readiness probes until the start up is complete
        # it only run one time at the beginning 
        httpGet:
          path : / # or any other get routes /health
          port: 8080
        initialDelaySeconds: 5 # After the container is running how many S to start testing, default is 0
        periodSeconds: 60 # test the container per S, default is 10
  volumes:
    # Store the data for the duration of the pod
    # Data is not lost when the container is restarted
    # Data does not persist when the pod is moved to another node
    - name : cache-volume
      emptyDir:
        sizeLimit: "500Mi"
        # medium: Memory # if the storage need to save to the memory of the container not in Pods Storage
    # - name: myHostPathVolume
    #   # Allows you to mount a file or dir from the host node (Not Recommended)
    #   hostPath:
    #     path: /etc/data
    #     type: DirectoryOrCreate  # OR FileOrCreate OR File

    # - name: myNfsVolume
    #   # Can be used to share data among pods on the same or on different nodes
    #   nfs:
    #     server: 192.168.2.138
    #     path: /path/to/share
    #     readOnly: true
    
